<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-15T01:46:28+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Thumbs Up Rails</title><subtitle>Personal Blog and website with blog posts about the Ruby on Rails framework  Topics include Hotwire and Stimulus JS how to guides, Kamal deployment.</subtitle><entry><title type="html">Annotating models in your rails app with the rails-lens gem</title><link href="http://localhost:4000/tutorial/2025/08/12/annotating-your-models-with-the-rails-lens-gem.html" rel="alternate" type="text/html" title="Annotating models in your rails app with the rails-lens gem" /><published>2025-08-12T23:10:12+03:00</published><updated>2025-08-12T23:10:12+03:00</updated><id>http://localhost:4000/tutorial/2025/08/12/annotating-your-models-with-the-rails-lens-gem</id><content type="html" xml:base="http://localhost:4000/tutorial/2025/08/12/annotating-your-models-with-the-rails-lens-gem.html"><![CDATA[<p>At some point in a Rails project, you’ll have to go through a period of understanding the models and the relationships inside them. This will be more likely before you start contributing to a rails open source project or at your new job. This part of onboarding usually involves a dauting process of going back and forth between the model files and the <code class="language-plaintext highlighter-rouge">schema.rb</code> file with the sole purpose of mapping relationships between database tables as well as establishing what the models them selves are capable of. Luckily for us, there is a better way to achieve the same, and with less frustration by using the <code class="language-plaintext highlighter-rouge">rails-lens</code> gem.</p>

<p>Rails Lens will annotate model files in your app and highlight relationships between database tables in your application, all by running a single command. For purposes of this tutorial, I’ve set up a sample Rails app.</p>

<p>This rails app is the usual rails blog application. It has a couple models namely Post, User, Comment and Category. These models have various associations between each other in the sense that, a post belongs to a user, has many comments and belongs to a category. Attached below are the model files.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>To set up rails lens in the application, add the line below to your gem file. I’ve chosen to install version 
<code class="language-plaintext highlighter-rouge">0.2.6</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>Run <code class="language-plaintext highlighter-rouge">bundle install</code></p>

<p>If the installation is successful, you’ll see the output below in your terminal when you run <code class="language-plaintext highlighter-rouge">bundle info rails_lens</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">*</span> <span class="n">rails_lens</span> <span class="p">(</span><span class="mf">0.2</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>
	<span class="no">Summary</span><span class="p">:</span> <span class="no">Comprehensive</span> <span class="no">Rails</span> <span class="n">application</span> <span class="n">visualization</span> <span class="ow">and</span> <span class="n">annotation</span>
	<span class="no">Homepage</span><span class="p">:</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">seuros</span><span class="o">/</span><span class="n">rails_lens</span>
	<span class="no">Source</span> <span class="no">Code</span><span class="p">:</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">seuros</span><span class="o">/</span><span class="n">rails_lens</span>
	<span class="no">Changelog</span><span class="p">:</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">seuros</span><span class="o">/</span><span class="n">rails_lens</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="no">CHANGELOG</span><span class="p">.</span><span class="nf">md</span>
	<span class="no">Path</span><span class="p">:</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.3</span><span class="o">.</span><span class="mi">4</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">rails_lens</span><span class="o">-</span><span class="mf">0.2</span><span class="o">.</span><span class="mi">6</span>
</code></pre></div></div>

<p>Note: At the time of writing this article, you have to specify the version of rails-lens you want to be installed. By just adding <code class="language-plaintext highlighter-rouge">gem 'rails-lens'</code> to your gem file and running <code class="language-plaintext highlighter-rouge">bundle install</code>, the version that ends up being installed is a placeholder version named <code class="language-plaintext highlighter-rouge">0.0.0</code>. With this version, you’ll run into the error below when you run the command responsible for annotation.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">bundler: </span><span class="n">command</span> <span class="ow">not</span> <span class="ss">found: </span><span class="n">rails_lens</span>
<span class="no">Install</span> <span class="n">missing</span> <span class="n">gem</span> <span class="n">executables</span> <span class="n">with</span> <span class="sb">`bundle install`</span>
</code></pre></div></div>

<p>After installing the <code class="language-plaintext highlighter-rouge">rails-lens</code> gem, now onto the fun part, annotation.</p>

<p>To annotate all the model files in the application, run the command below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails_lens</span> <span class="n">annotate</span>
</code></pre></div></div>
<p>The above command adds annotations the 4 model files in our rails app.</p>

<p>Let’s take a quick look at the <code class="language-plaintext highlighter-rouge">post.rb</code> model file.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;rails-lens:schema:begin&gt;</span>
<span class="c1"># table = "posts"</span>
<span class="c1"># database_dialect = "SQLite"</span>
<span class="c1">#</span>
<span class="c1"># columns = [</span>
<span class="c1">#   { name = "id", type = "integer", primary_key = true, nullable = false },</span>
<span class="c1">#   { name = "title", type = "text", nullable = true },</span>
<span class="c1">#   { name = "body", type = "text", nullable = true },</span>
<span class="c1">#   { name = "category_id", type = "integer", nullable = false },</span>
<span class="c1">#   { name = "user_id", type = "integer", nullable = false },</span>
<span class="c1">#   { name = "created_at", type = "datetime", nullable = false },</span>
<span class="c1">#   { name = "updated_at", type = "datetime", nullable = false }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># indexes = [</span>
<span class="c1">#   { name = "index_posts_on_user_id", columns = ["user_id"] },</span>
<span class="c1">#   { name = "index_posts_on_category_id", columns = ["category_id"] }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># foreign_keys = [</span>
<span class="c1">#   { column = "user_id", references_table = "users", references_column = "id" },</span>
<span class="c1">#   { column = "category_id", references_table = "categories", references_column = "id" }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># == Notes</span>
<span class="c1"># - Association 'comments' should specify inverse_of</span>
<span class="c1"># - Association 'comments' has N+1 query risk. Consider using includes/preload</span>
<span class="c1"># - Column 'title' should probably have NOT NULL constraint</span>
<span class="c1"># - Column 'body' should probably have NOT NULL constraint</span>
<span class="c1"># - Large text column 'title' is frequently queried - consider separate storage</span>
<span class="c1"># - Large text column 'body' is frequently queried - consider separate storage</span>
<span class="c1"># &lt;rails-lens:schema:end&gt;</span>


<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">dependent: :destroy</span>
  <span class="n">belongs_to</span> <span class="ss">:category</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>
</code></pre></div></div>
<p>With the lines below, we can identify that this is a schema annotation for the Posts table in a rails application using SQlite for the database.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;rails-lens:schema:begin&gt;</span>
<span class="c1"># table = "posts"</span>
<span class="c1"># database_dialect = "SQLite"</span>
<span class="c1"># rest of annotation ommitted for brevity</span>
<span class="c1"># &lt;rails-lens:schema:end&gt;</span>
</code></pre></div></div>

<p>The annotation also lets us know about the columns and indexes of the Posts table under the <code class="language-plaintext highlighter-rouge">columns</code> and <code class="language-plaintext highlighter-rouge">indexes</code> sections. Each of the columns of the Post table in the annotation is displayed with either <code class="language-plaintext highlighter-rouge">nullable = false</code> or <code class="language-plaintext highlighter-rouge">nullable = true</code> highlighting whether for the value of a given column can be <code class="language-plaintext highlighter-rouge">null</code> or not at the time of saving a post in the database.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># columns = [</span>
<span class="c1">#   { name = "id", type = "integer", primary_key = true, nullable = false },</span>
<span class="c1">#   { name = "title", type = "text", nullable = true },</span>
<span class="c1">#   { name = "body", type = "text", nullable = true },</span>
<span class="c1">#   { name = "category_id", type = "integer", nullable = false },</span>
<span class="c1">#   { name = "user_id", type = "integer", nullable = false },</span>
<span class="c1">#   { name = "created_at", type = "datetime", nullable = false },</span>
<span class="c1">#   { name = "updated_at", type = "datetime", nullable = false }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># indexes = [</span>
<span class="c1">#   { name = "index_posts_on_user_id", columns = ["user_id"] },</span>
<span class="c1">#   { name = "index_posts_on_category_id", columns = ["category_id"] }</span>
<span class="c1"># ]</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">foreign_keys</code> section of the annotation highlights the associations between the Post model and other models in the application namely the User and Category.</p>

<p>We get extra notes as part of the annotation as well and this is where <code class="language-plaintext highlighter-rouge">rails-lens</code> shines compared to other annotation gems.</p>

<p>As part of the output you can see that <code class="language-plaintext highlighter-rouge">rails-lens</code> notified us of some ways in which the schema and therefore our application could use some improvements. This includes the N+1 query risk associated with the Comment model.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># - Association 'comments' has N+1 query risk. Consider using includes/preload</span>
</code></pre></div></div>

<p>Also you might remember that aas part of the columns section of the annotation, the title and body columns had <code class="language-plaintext highlighter-rouge">nullable</code> set to true which means that its possible to create a post without a title or a body. This is not ideal as we would want every post within the application to have a title and a body. Rails lens lets us know about this as well.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># - Column 'title' should probably have NOT NULL constraint</span>
<span class="c1"># - Column 'body' should probably have NOT NULL constraint</span>
</code></pre></div></div>
<p>And now that we know about it, we can proceed to address it whether by adding a validation or any other approach.</p>

<p>Lastly Rails lens lets us know of the potential impacts on performance we many run into if we have so many records in the application and it doesn’t stop at that, it tells us what could potentially cause performance problems and what we can do to solve this.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># - Large text column 'title' is frequently queried - consider separate storage</span>
<span class="c1"># - Large text column 'body' is frequently queried - consider separate storage</span>
</code></pre></div></div>
<p>And there you have it, we were able to get information about the models in the application, all without constantly going back and forth between the model files and the <code class="language-plaintext highlighter-rouge">schema.rb</code> file.</p>

<p>The annotated Comment, User and Category models are attached below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;rails-lens:schema:begin&gt;</span>
<span class="c1"># table = "users"</span>
<span class="c1"># database_dialect = "SQLite"</span>
<span class="c1">#</span>
<span class="c1"># columns = [</span>
<span class="c1">#   { name = "id", type = "integer", primary_key = true, nullable = false },</span>
<span class="c1">#   { name = "name", type = "string", nullable = true },</span>
<span class="c1">#   { name = "email", type = "string", nullable = true },</span>
<span class="c1">#   { name = "created_at", type = "datetime", nullable = false },</span>
<span class="c1">#   { name = "updated_at", type = "datetime", nullable = false }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># == Notes</span>
<span class="c1"># - Column 'name' should probably have NOT NULL constraint</span>
<span class="c1"># - Column 'email' should probably have NOT NULL constraint</span>
<span class="c1"># - String column 'name' has no length limit - consider adding one</span>
<span class="c1"># - String column 'email' has no length limit - consider adding one</span>
<span class="c1"># - Column 'email' is commonly used in queries - consider adding an index</span>
<span class="c1"># &lt;rails-lens:schema:end&gt;</span>


<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;rails-lens:schema:begin&gt;</span>
<span class="c1"># table = "comments"</span>
<span class="c1"># database_dialect = "SQLite"</span>
<span class="c1">#</span>
<span class="c1"># columns = [</span>
<span class="c1">#   { name = "id", type = "integer", primary_key = true, nullable = false },</span>
<span class="c1">#   { name = "content", type = "text", nullable = true },</span>
<span class="c1">#   { name = "post_id", type = "integer", nullable = false },</span>
<span class="c1">#   { name = "created_at", type = "datetime", nullable = false },</span>
<span class="c1">#   { name = "updated_at", type = "datetime", nullable = false }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># indexes = [</span>
<span class="c1">#   { name = "index_comments_on_post_id", columns = ["post_id"] }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># foreign_keys = [</span>
<span class="c1">#   { column = "post_id", references_table = "posts", references_column = "id" }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># == Notes</span>
<span class="c1"># - Association 'post' should specify inverse_of</span>
<span class="c1"># - Column 'content' should probably have NOT NULL constraint</span>
<span class="c1"># - Large text column 'content' is frequently queried - consider separate storage</span>
<span class="c1"># &lt;rails-lens:schema:end&gt;</span>


<span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;rails-lens:schema:begin&gt;</span>
<span class="c1"># table = "categories"</span>
<span class="c1"># database_dialect = "SQLite"</span>
<span class="c1">#</span>
<span class="c1"># columns = [</span>
<span class="c1">#   { name = "id", type = "integer", primary_key = true, nullable = false },</span>
<span class="c1">#   { name = "name", type = "string", nullable = true },</span>
<span class="c1">#   { name = "created_at", type = "datetime", nullable = false },</span>
<span class="c1">#   { name = "updated_at", type = "datetime", nullable = false }</span>
<span class="c1"># ]</span>
<span class="c1">#</span>
<span class="c1"># == Notes</span>
<span class="c1"># - Column 'name' should probably have NOT NULL constraint</span>
<span class="c1"># - String column 'name' has no length limit - consider adding one</span>
<span class="c1"># &lt;rails-lens:schema:end&gt;</span>


<span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Also, its possible to annotate specific model files using the command below;</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails_lens</span> <span class="n">annotate</span> <span class="o">--</span><span class="n">model</span> <span class="no">Post</span> <span class="no">Comment</span>
</code></pre></div></div>
<p>To remove the annotations, run the command below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails_lens</span> <span class="n">remove</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="tutorial" /><summary type="html"><![CDATA[At some point in a Rails project, you’ll have to go through a period of understanding the models and the relationships inside them. This will be more likely before you start contributing to a rails open source project or at your new job. This part of onboarding usually involves a dauting process of going back and forth between the model files and the schema.rb file with the sole purpose of mapping relationships between database tables as well as establishing what the models them selves are capable of. Luckily for us, there is a better way to achieve the same, and with less frustration by using the rails-lens gem.]]></summary></entry><entry><title type="html">Refactoring If statements with a ternary operator</title><link href="http://localhost:4000/refactoring/2025/08/11/refactoring-if-statements-with-a-ternary-operator.html" rel="alternate" type="text/html" title="Refactoring If statements with a ternary operator" /><published>2025-08-11T23:53:47+03:00</published><updated>2025-08-11T23:53:47+03:00</updated><id>http://localhost:4000/refactoring/2025/08/11/refactoring-if-statements-with-a-ternary-operator</id><content type="html" xml:base="http://localhost:4000/refactoring/2025/08/11/refactoring-if-statements-with-a-ternary-operator.html"><![CDATA[<p>Junior ruby developers have this very strong compulsion to think of solving coding problems in terms of if statements. And before you come at me, I came to this realization simply because I’m a junior myself. This isn’t me trashing if statements as a problem solving approach. On the contrary, if statements are sometimes absolutely necessary and if you were to take a deep dive of some of the best rails/ruby code bases out there, you’ll notice that they employ if statements in multiple places.</p>

<p>Take for example, you have a single condition and you have two desired outputs. One output is returned when the condition is true and the other is returned if the condition is false. It wouldn’t make sense for you to apply a complex technique for example like metaprogramming to implement this. A simple if statement would suffice.</p>

<p>So we’ve established two things, one is that if statements are important. The second is that there are cases when a simple if statement will be the most appropriate approach for the problem you’re solving. Following these two realisations, in this post, we’ll look at one of the approaches of refactoring your if statements such that they look more “beautiful”. For those that have contributed to open source projects before, without even realizing, you might’ve been required to apply this technique to rewrite your if statements before your PR was merged. If that was you, this post will get you up to speed with what you probably did. So let’s dive right in.</p>

<p>A ternary operator is a common approach to refactoring if statements in your Ruby project.</p>

<p>Just like the if-statement its meant to refactor, the ternary operator consists of 3 parts namely:</p>

<ul>
  <li>A condition</li>
  <li>what should be returned if the condition evaluates to true</li>
  <li>what should be returned if the condition evaluates to false</li>
</ul>

<p>Having the components of the ternary operator in mind, we can visualize it to look like below:</p>

<p><code class="language-plaintext highlighter-rouge">condition ? return this if condition is true : return this if condition is false</code></p>

<p>Now that we know the structure of a ternary operator, let’s proceed to use it to refactor an if statement in actual code.</p>

<p>Consider the method below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">value</span>
  <span class="n">stored_value</span> <span class="o">=</span> <span class="k">super</span>

  <span class="k">if</span> <span class="vi">@display_code</span>
    <span class="n">stored_value</span>
  <span class="k">else</span>
    <span class="n">countries</span><span class="p">[</span><span class="n">stored_value</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Refactored using a ternary operator, the if statement in the above method would look like below:</p>

<p><code class="language-plaintext highlighter-rouge">@display_code ? stored_value : countries[stored_value]</code></p>

<p>Therefore the final method would look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">value</span>
  <span class="n">stored_value</span> <span class="o">=</span> <span class="k">super</span> 

  <span class="vi">@display_code</span> <span class="p">?</span> <span class="n">stored_value</span> <span class="p">:</span> <span class="n">countries</span><span class="p">[</span><span class="n">stored_value</span><span class="p">]</span> 
<span class="k">end</span>
</code></pre></div></div>
<p>With the ternary operator, we managed to refactor the if statement in the method to be more cleaner and maintainable.</p>

<p>I applied this technique as part of a contribution I made into Avo and in case you are interested in learning more about the context of this PR, consider checking it out here.</p>

<p>https://github.com/avo-hq/avo/pull/4005</p>]]></content><author><name></name></author><category term="refactoring" /><summary type="html"><![CDATA[Junior ruby developers have this very strong compulsion to think of solving coding problems in terms of if statements. And before you come at me, I came to this realization simply because I’m a junior myself. This isn’t me trashing if statements as a problem solving approach. On the contrary, if statements are sometimes absolutely necessary and if you were to take a deep dive of some of the best rails/ruby code bases out there, you’ll notice that they employ if statements in multiple places.]]></summary></entry><entry><title type="html">Refactoring metaprogramming even further</title><link href="http://localhost:4000/refactoring/2025/08/07/refactoring-metaprogramming-even-futher.html" rel="alternate" type="text/html" title="Refactoring metaprogramming even further" /><published>2025-08-07T23:53:47+03:00</published><updated>2025-08-07T23:53:47+03:00</updated><id>http://localhost:4000/refactoring/2025/08/07/refactoring-metaprogramming-even-futher</id><content type="html" xml:base="http://localhost:4000/refactoring/2025/08/07/refactoring-metaprogramming-even-futher.html"><![CDATA[<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_METHODS_MAPPING</span>
  <span class="no">VIEW_METHODS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index_fields</span><span class="p">,</span> <span class="ss">:display_fields</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show_fields</span><span class="p">,</span> <span class="ss">:display_fields</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">]</span>
    <span class="p">}</span>
<span class="k">end</span>
      
<span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_CARDS_MAPPING</span>
  <span class="no">VIEW_CARDS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index_cards</span><span class="p">,</span> <span class="ss">:display_cards</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show_cards</span><span class="p">,</span> <span class="ss">:display_cards</span><span class="p">]</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">]</span>
    <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">fetch_fields</span>
  
  <span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_METHODS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>
  
  <span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">fields</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">fetch_cards</span>
  <span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_CARDS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>

  <span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span>
  <span class="k">end</span>
  
  <span class="n">cards</span>
<span class="k">end</span>
</code></pre></div></div>
<p>The code above applies a technique called metaprogramming to generate a myriad of methods ending in the “_fields” or “_cards” suffixes based on the current view. Take for example, the index view, the code generates 2 methods ending in the “_fields” suffix. These are; <code class="language-plaintext highlighter-rouge">index_fields</code> and <code class="language-plaintext highlighter-rouge">display_fields</code>. Using either of these methods, we can define which fields are displayed on the index view of a given resource.</p>

<p>Take for example we have a post resource. If we want to display the title of the post along with its cover photo on the index page, we can achive this with the following code inside the post resource.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Avo::Resources::Post</span> <span class="o">&lt;</span> <span class="no">Avo</span><span class="o">::</span><span class="no">BaseResource</span>

  <span class="k">def</span> <span class="nf">index_fields</span>
   <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">as: :text</span>
   <span class="n">field</span> <span class="ss">:cover_photo</span><span class="p">,</span> <span class="ss">as: :file</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>
<p>When we navigate to the index page of the Post resource, these two fields will be displayed. And for those unfarmiliar with Avo’s DSL, what this means is that, we’ll see both title and the cover photo displayed on the index page for each individual post.</p>

<p>The same kind of thinking applies when thinking about the methods ending in the “_cards” suffix. As part of a card, we can define some extra information we’d want to display for a resource other than the fields. Take an example of the post resource from before, assuming we want to display the name of the creator of agiven post and the date on which a particular post was created, we can use a card for this.</p>

<p>If we want this card to be displayed on the index page, the metaprogramming code above provides us with a method named <code class="language-plaintext highlighter-rouge">index_cards</code>. With this method, we can define what “information” is displayed as part of the card. Something like below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Avo::Resources::Post</span> <span class="o">&lt;</span> <span class="no">Avo</span><span class="o">::</span><span class="no">BaseResource</span>
  <span class="k">def</span> <span class="nf">index_cards</span>
    <span class="n">card</span> <span class="no">Avo</span><span class="o">::</span><span class="no">Cards</span><span class="o">::</span><span class="no">ExtraPostInformation</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Then we’d define the information that get’s displayed on the card. For this, we’d use a specific kind of card called a Partial card.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Avo::Cards::ExtraPostInformation</span> <span class="o">&lt;</span> <span class="no">Avo</span><span class="o">::</span><span class="no">Cards</span><span class="o">::</span><span class="no">PartialCard</span>
    <span class="c1"># code to display name of post creator</span>
    <span class="c1"># code to display the date of creation of a post</span>
<span class="k">end</span>
</code></pre></div></div>
<p>With the above code, the card will be displayed on the Index page of the post resource with our defined information namely the Post creator’s name and the date of creation of the Post.</p>

<p>Now that you’re up to speed with what the code does, we’ll proceed to refactoring it. In case you haven’t noticed, the above code contains a duplication.</p>

<p>Taking a look at the <code class="language-plaintext highlighter-rouge">VIEW_METHODS_MAPPING</code> and the <code class="language-plaintext highlighter-rouge">VIEW_CARDS_MAPPING</code>, we notice that these two mappings are almost identical, with the only difference being the fact suffix i.e. <code class="language-plaintext highlighter-rouge">_cards</code> and <code class="language-plaintext highlighter-rouge">_fields</code>.</p>

<p><code class="language-plaintext highlighter-rouge">VIEW_METHODS_MAPPING</code>:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_METHODS_MAPPING</span>
  <span class="no">VIEW_METHODS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index_fields</span><span class="p">,</span> <span class="ss">:display_fields</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show_fields</span><span class="p">,</span> <span class="ss">:display_fields</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new_fields</span><span class="p">,</span> <span class="ss">:form_fields</span><span class="p">]</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">VIEW_CARDS_MAPPING</code>:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_CARDS_MAPPING</span>
  <span class="no">VIEW_CARDS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index_cards</span><span class="p">,</span> <span class="ss">:display_cards</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show_cards</span><span class="p">,</span> <span class="ss">:display_cards</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new_cards</span><span class="p">,</span> <span class="ss">:form_cards</span><span class="p">]</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We could refactor these two mappings into a single mapping thereby doing away with the duplication.
Since the end goal of this metaprogramming functionality is to generate methods, opting for the name of the mapping to be <code class="language-plaintext highlighter-rouge">VIEW_METHODS_MAPPING</code> makes more sense compared to <code class="language-plaintext highlighter-rouge">VIEW_CARDS_MAPPING</code>.</p>

<p>The refactored code for the mapping will look like below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_METHODS_MAPPING</span>
  <span class="no">VIEW_METHODS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:display</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:display</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:form</span><span class="p">]</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>
<p>By defaulting to one mapping for generating <code class="language-plaintext highlighter-rouge">fields</code> and <code class="language-plaintext highlighter-rouge">cards</code> methods, we’ve done away with the duplication in the initial code. We’ll now proceed to make changes inside the <code class="language-plaintext highlighter-rouge">fetch_cards</code> and <code class="language-plaintext highlighter-rouge">fetch_fields</code> methods since this is where the code which generates the actual methods AKA the metaprogramming code is defined.</p>

<p>First the <code class="language-plaintext highlighter-rouge">fetch_fields</code> method. 
We’ll use the syntax <code class="language-plaintext highlighter-rouge">:"#{method_for_view}_fields"</code> to dynamically append the suffix when generating <code class="language-plaintext highlighter-rouge">fields</code> methods for a given view.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># code ommitted for brevity</span>
<span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_METHODS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>

<span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
  <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_fields"</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_fields"</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">fields</span>
</code></pre></div></div>
<p>To explain this code a bit I’ll pose a question? How does the above code generate the 2 methods namely <code class="language-plaintext highlighter-rouge">index_fields</code> and <code class="language-plaintext highlighter-rouge">display_fields</code>? Recall that these methods serve the purpose of defining the fields displayed on the index view of a resource.</p>

<p>We start with the line of code below:
<code class="language-plaintext highlighter-rouge">possible_methods_for_view = VIEW_METHODS_MAPPING[view.to_sym]</code>:</p>
<ul>
  <li>creates a variable named <code class="language-plaintext highlighter-rouge">possible_methods_for_view</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">view</code> corresponds to the current view, in which case this will be the index view. The <code class="language-plaintext highlighter-rouge">.to_sym</code> method turns the receiver(index) into a symbol eventually returning <code class="language-plaintext highlighter-rouge">:index</code>.</li>
</ul>

<p>By this logic, we now have this <code class="language-plaintext highlighter-rouge">possible_methods_for_view = VIEW_METHOD_MAPPING[:index]</code>. Since <code class="language-plaintext highlighter-rouge">VIEW_METHODS_MAPPING</code> is a hash with one of the keys inside this hash being the <code class="language-plaintext highlighter-rouge">:index</code> symbol, as seen below:
<code class="language-plaintext highlighter-rouge">index: [:index, :display]</code>, 
we are able to access the 2 symbol values corresponding to the <code class="language-plaintext highlighter-rouge">:index</code> key namely <code class="language-plaintext highlighter-rouge">:index</code> and <code class="language-plaintext highlighter-rouge">:display</code>. We’ll use these as the first parts of the index view method names.</p>

<p>The metaprogramming code below:</p>

<p><code class="language-plaintext highlighter-rouge">return send(:"#{method_for_view}_fields") if respond_to?(:"#{method_for_view}_fields")</code></p>

<p>will append the <code class="language-plaintext highlighter-rouge">_fields</code> suffix to the 2 values namely <code class="language-plaintext highlighter-rouge">index</code> and <code class="language-plaintext highlighter-rouge">display</code> such that we end up with 2 methods for the index view namely: <code class="language-plaintext highlighter-rouge">index_fields</code> and <code class="language-plaintext highlighter-rouge">display_fields</code>.</p>

<p>For these 2 generated methods, we loop through them to see if the view specific <code class="language-plaintext highlighter-rouge">index_fields</code> method was defined in the resource file, and if this evaluates to true, the method returns. If it evaluates to false, we proceed to check whether the less-specific <code class="language-plaintext highlighter-rouge">display_fields</code> method was defined, and if yes the method returns. The key takeaway here, is that we check the generated methods based on what was defined inside the resource file, with the view-specific methods such as <code class="language-plaintext highlighter-rouge">index_fields</code> taking precedence over context-specific methods such as <code class="language-plaintext highlighter-rouge">display_fields</code>. At any one point during the check, if we find a match, we return and the method exits, otherwise we continue the check with the next available method for that view.</p>

<p><code class="language-plaintext highlighter-rouge">display_fields</code> is referred to as a context-specific method because it not only applies to the index view but also the show view which are both display views.</p>

<p>By using this syntax <code class="language-plaintext highlighter-rouge">:"#{method_for_view}_fields"</code> instead of <code class="language-plaintext highlighter-rouge">method_for_view</code>, we have the code automatically append <code class="language-plaintext highlighter-rouge">_fields</code> when generating a <code class="language-plaintext highlighter-rouge">fields</code> method thereby removing the initial duplication in the mapping.</p>

<blockquote>
  <p>Both the initial and the new metaprogramming implementations utilize 2 methods named <code class="language-plaintext highlighter-rouge">send</code> and <code class="language-plaintext highlighter-rouge">respond_to?</code>.
These are covered in more detail in the posts linked at the end of this post.</p>
</blockquote>

<p>For the <code class="language-plaintext highlighter-rouge">fetch_cards</code> method, we’ll use a variation of the same syntax just like in the <code class="language-plaintext highlighter-rouge">fetch_fields</code> method, to have the <code class="language-plaintext highlighter-rouge">_cards</code> suffix dynamically appended when generating <code class="language-plaintext highlighter-rouge">cards</code> methods for a specific view.</p>

<p><code class="language-plaintext highlighter-rouge">:"#{method_for_view}_cards"</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fetch_cards</span>
  <span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_METHODS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>

  <span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_cards"</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_cards"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">cards</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Because we specify the suffix to be <code class="language-plaintext highlighter-rouge">_cards</code> instead of <code class="language-plaintext highlighter-rouge">_fields</code> in this line of code, <code class="language-plaintext highlighter-rouge">:"#{method_for_view}_cards"</code>, we’ll end up with 2 cards methods generated for the index view namely <code class="language-plaintext highlighter-rouge">index_cards</code> and <code class="language-plaintext highlighter-rouge">display_cards</code>.</p>

<p>The new version of the initial code will look like below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="k">defined?</span> <span class="no">VIEW_METHODS_MAPPING</span>
  <span class="no">VIEW_METHODS_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:display</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:display</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:form</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:form</span><span class="p">]</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">fetch_fields</span>
  <span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_METHODS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>
  
  <span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_fields"</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_fields"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">fields</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">fetch_cards</span>
  <span class="n">possible_methods_for_view</span> <span class="o">=</span> <span class="no">VIEW_METHODS_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>

  <span class="n">possible_methods_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_cards"</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:"</span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="ss">_cards"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">cards</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="refactoring" /><summary type="html"><![CDATA[```ruby unless defined? VIEW_METHODS_MAPPING VIEW_METHODS_MAPPING = { index: [:index_fields, :display_fields], show: [:show_fields, :display_fields], edit: [:edit_fields, :form_fields], update: [:edit_fields, :form_fields], new: [:new_fields, :form_fields], create: [:new_fields, :form_fields] } end unless defined? VIEW_CARDS_MAPPING VIEW_CARDS_MAPPING = { index: [:index_cards, :display_cards], show: [:show_cards, :display_cards] edit: [:edit_cards, :form_cards], update: [:edit_cards, :form_cards], new: [:new_cards, :form_cards], create: [:new_cards, :form_cards] } end]]></summary></entry><entry><title type="html">Learn about Ruby’s send method with a practical example</title><link href="http://localhost:4000/refactoring/ruby/2025/08/05/all-about-the-send-method-in-ruby.html" rel="alternate" type="text/html" title="Learn about Ruby’s send method with a practical example" /><published>2025-08-05T23:53:47+03:00</published><updated>2025-08-05T23:53:47+03:00</updated><id>http://localhost:4000/refactoring/ruby/2025/08/05/all-about-the-send-method-in-ruby</id><content type="html" xml:base="http://localhost:4000/refactoring/ruby/2025/08/05/all-about-the-send-method-in-ruby.html"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">send</code> method is one of the most commonly used Ruby methods when implementing metaprogramming solutions to problems in Ruby. For this reason, it is imperative that you understand how it works and the context in which its a method of choice. There is no better way to do this than with a practical example.</p>

<p>Keep the code below in mind as everything that follows in this post will refer to it.</p>

<p>You have a <code class="language-plaintext highlighter-rouge">document.rb</code> file. This file will contain the metaprogramming code which serves the sole purpose of dynamically building a set of methods ending in the <code class="language-plaintext highlighter-rouge">_attributes</code> suffix with one example being the <code class="language-plaintext highlighter-rouge">index_attributes</code> method in the Post class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Document</span>
  <span class="nb">attr_accessor</span> <span class="ss">:view</span> 

  <span class="no">VIEW_ATTRIBUTES_MAPPING</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">index: </span><span class="p">[</span><span class="ss">:index_attributes</span><span class="p">,</span> <span class="ss">:display_attributes</span><span class="p">],</span>
    <span class="ss">show: </span><span class="p">[</span><span class="ss">:show_attributes</span><span class="p">,</span> <span class="ss">:display_attributes</span><span class="p">],</span>
    <span class="ss">edit: </span><span class="p">[</span><span class="ss">:edit_attributes</span><span class="p">,</span> <span class="ss">:form_attributes</span><span class="p">],</span>
    <span class="ss">new: </span><span class="p">[</span><span class="ss">:new_attributes</span><span class="p">,</span> <span class="ss">:form_attributes</span><span class="p">],</span>
    <span class="ss">create: </span><span class="p">[</span><span class="ss">:new_attributes</span><span class="p">,</span> <span class="ss">:form_attributes</span><span class="p">],</span>
    <span class="ss">update: </span><span class="p">[</span><span class="ss">:edit_attributes</span><span class="p">,</span> <span class="ss">:form_attributes</span><span class="p">]</span>
   <span class="p">}</span>

  <span class="k">def</span> <span class="nf">fetch_attributes</span>
    <span class="n">possible_attributes_for_view</span> <span class="o">=</span> <span class="no">VIEW_ATTRIBUTES_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>
    
    <span class="n">possible_attributes_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>

      <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Then a <code class="language-plaintext highlighter-rouge">post.rb</code> file which inherits from what is defined in <code class="language-plaintext highlighter-rouge">document.rb</code>. In this file, we determine a method named <code class="language-plaintext highlighter-rouge">index_attributes</code> which returns an array of items when called.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">Document</span>
  <span class="nb">attr_accessor</span> <span class="ss">:view</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
    <span class="vi">@view</span> <span class="o">=</span> <span class="n">view</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">index_attributes</span>
    <span class="p">[</span><span class="n">title</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">cover_photo</span><span class="p">,</span> <span class="n">creator</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>At some point in the base.rb file, we have a call to the <code class="language-plaintext highlighter-rouge">send</code> method. By examining this line of code, we’ll be able to answer questions about how the <code class="language-plaintext highlighter-rouge">send</code> method works.</p>
<ol>
  <li>What is the receiver object when calling the <code class="language-plaintext highlighter-rouge">send</code> method in this line of code?</li>
  <li>How does the class of this receiver object change in various contexts?</li>
  <li>What purpose does the <code class="language-plaintext highlighter-rouge">send</code> method perform in this code and why is it referred to as a metaprogramming method?</li>
  <li>The <code class="language-plaintext highlighter-rouge">send</code> method in this code is used in conjunction with the <code class="language-plaintext highlighter-rouge">respond_to?</code> method. Why is this?</li>
</ol>

<h2 id="send-has-been-summoned-but-by-who">Send has been summoned but by who?</h2>
<p>Usually a Ruby method is called like below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">receiver</span><span class="p">.</span><span class="nf">method</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">receiver</code> being the object which the <code class="language-plaintext highlighter-rouge">method</code> is called on. However, the line of code with the <code class="language-plaintext highlighter-rouge">send</code> method looks peculiar in the sense that, we see a method named <code class="language-plaintext highlighter-rouge">send</code> being called but by who? Who is calling the <code class="language-plaintext highlighter-rouge">send</code> method? The line with the <code class="language-plaintext highlighter-rouge">send</code> method call doesn’t specify an explicit receiver for the method call.
<code class="language-plaintext highlighter-rouge">return send(method_for_view) if respond_to?(method_for_view)</code></p>

<p>If you’re an experienced Ruby developer, its probably quick for you to know that the above line of code is synonymous with the line of code below with the <code class="language-plaintext highlighter-rouge">self</code> being usually ommitted for stylistic reasons.
<code class="language-plaintext highlighter-rouge">return self.send(method_for_view) if self.respond_to?(method_for_view)</code>.</p>

<p>Now that we’ve established that <code class="language-plaintext highlighter-rouge">self</code> is the receiver for the <code class="language-plaintext highlighter-rouge">send</code> method call, all is starting to make sense. However, we are still left with one question to answer. What does <code class="language-plaintext highlighter-rouge">self</code> refer to in this context?</p>

<p>Let’s refresh our minds by going back to what this line of code does. The line is supposed to check if a bunch of methods ending in the <code class="language-plaintext highlighter-rouge">_attributes</code> suffix are defined some where, possibly a Ruby class of some sort. If these methods are defined in that specific place i.e <code class="language-plaintext highlighter-rouge">respond_to?</code> returns true, the defined methods ending in the <code class="language-plaintext highlighter-rouge">_attributes</code> suffix will be called on an object created by that specific class where the method was defined in the first place.</p>

<p>In the <code class="language-plaintext highlighter-rouge">post.rb</code> file, we have an <code class="language-plaintext highlighter-rouge">index_attributes</code> method. If we replace <code class="language-plaintext highlighter-rouge">method_for_view</code> with <code class="language-plaintext highlighter-rouge">index_attributes</code>, the line of code with the send method call will be equivalent to <code class="language-plaintext highlighter-rouge">return self.send(:index_attributes) if self.respond_to?(:index_attributes)</code>.</p>

<p>In English, the line of code above loosely translates to “Call the method named <code class="language-plaintext highlighter-rouge">index_attributes</code> on an object created by a class where the <code class="language-plaintext highlighter-rouge">index_attributes</code> method is defined but, first perform a check that the <code class="language-plaintext highlighter-rouge">index_attributes</code> method is actually defined in this class. Only if its defined, then call the method.”</p>

<p>This highlights two things:</p>
<ol>
  <li>
    <p>The call to <code class="language-plaintext highlighter-rouge">respond_to?</code> happens first. This checks if the <code class="language-plaintext highlighter-rouge">index_attributes</code> is defined in the class. Therefore, its safe to say that the value of <code class="language-plaintext highlighter-rouge">self</code> in <code class="language-plaintext highlighter-rouge">self.respond_to?(:index_attributes)</code> is an instance object whose mother class is the class where the <code class="language-plaintext highlighter-rouge">index_attributes</code> method is defined.</p>
  </li>
  <li>
    <p>The call to <code class="language-plaintext highlighter-rouge">send</code> happens last. This actually calls the “already defined” method on the specific instance object. Therefore, even in this case <code class="language-plaintext highlighter-rouge">self</code> is equivalent to an instance object created from the class where the <code class="language-plaintext highlighter-rouge">index_attributes</code> method is defined.</p>
  </li>
</ol>

<p>In both cases, since the <code class="language-plaintext highlighter-rouge">index_attributes</code> method is defined in the Post class, the object which is <code class="language-plaintext highlighter-rouge">self</code> will translate to an instance object of the Post class. By this logic, we expect the method to return an array of the following items; <code class="language-plaintext highlighter-rouge">[title, body, cover_photo, creator]</code>. Let’s try this out in an irb session.</p>

<p>Temporarily modify the <code class="language-plaintext highlighter-rouge">fetch_attributes</code> method to point out the current value of <code class="language-plaintext highlighter-rouge">self</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fetch_attributes</span>
  <span class="n">possible_attributes_for_view</span> <span class="o">=</span> <span class="no">VIEW_ATTRIBUTES_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>
   
  <span class="n">possible_attributes_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"Current value of self is: </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p>Create a new post instance and proceed to call the <code class="language-plaintext highlighter-rouge">fetch_attributes</code> method on it.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">146</span> <span class="o">&gt;</span> <span class="n">new_post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="c1">#&lt;Post:0x0000776499e39bb0 @view=:index&gt; </span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">147</span> <span class="o">&gt;</span> <span class="n">new_post</span><span class="p">.</span><span class="nf">fetch_attributes</span>
<span class="no">The</span> <span class="n">current</span> <span class="n">value</span> <span class="n">of</span> <span class="nb">self</span> <span class="ss">is: </span><span class="c1">#&lt;Post:0x0000776499e39bb0&gt;</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:cover_photo</span><span class="p">,</span> <span class="ss">:creator</span><span class="p">]</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">148</span> <span class="o">&gt;</span> 
</code></pre></div></div>
<p>As you can see, the current value of <code class="language-plaintext highlighter-rouge">self</code> is the newly created instance object named post.</p>

<p>Also, when we call <code class="language-plaintext highlighter-rouge">post.fetch_attributes</code>, we get the array of items returned to us. This is because since we has set the current view to be index, 2 methods related to the index view will be created namely the <code class="language-plaintext highlighter-rouge">index_attributes</code> and <code class="language-plaintext highlighter-rouge">display_attributes</code>. The line <code class="language-plaintext highlighter-rouge">return send(method_for_view) if respond_to?(method_for_view)</code> will check for the <code class="language-plaintext highlighter-rouge">index_attributes</code> method first and if it was defined inside the Post class. Since this is the case, the method will return the output of calling the <code class="language-plaintext highlighter-rouge">index_attributes</code> method ([:title, :body, :cover_photo, :creator] ) and thereafter return.</p>

<p>Now that we’ve established who summoned the <code class="language-plaintext highlighter-rouge">send</code> method, we’ll proceed to investigate the changing nature of self.</p>

<h2 id="any-object-can-be-self-depending-on-context">Any object can be self depending on context</h2>
<p>Inside the Post class, if you look closely, you’ll notice a subtle detail. While <code class="language-plaintext highlighter-rouge">send(method_for_view)</code> can be written as <code class="language-plaintext highlighter-rouge">self.send(method_for_view)</code>, the method in the Post class is not written as below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">Document</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index_attributes</span>
    <span class="p">[</span><span class="n">title</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">cover_photo</span><span class="p">,</span> <span class="n">creator</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Why is this the case? To figure this out, lets create a new instance of the Post class and proceed to call the <code class="language-plaintext highlighter-rouge">index_attributes</code> method on it. This results into an error. Why is this?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">222</span> <span class="o">&gt;</span> <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="c1">#&lt;Post:0x0000776499f7bb68 @view=:index&gt; </span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">223</span> <span class="o">&gt;</span> <span class="n">post</span><span class="p">.</span><span class="nf">index_attributes</span>
<span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">223</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;': undefined method `</span><span class="n">index_attributes</span><span class="s1">' for #&lt;Post:0x0000776499f7bb68 @view=:index&gt; (NoMethodError)

post.index_attributes
    ^^^^^^^^^^^^^^^^^
	from /usr/share/rvm/gems/ruby-3.2.6/gems/irb-1.15.2/exe/irb:9:in `&lt;top (required)&gt;'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">irb</span><span class="p">:</span><span class="mi">25</span><span class="ss">:in</span> <span class="sb">`load'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/irb:25:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="s1">'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/ruby_executable_hooks:22:in `eval'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">ruby_executable_hooks</span><span class="p">:</span><span class="mi">22</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;'
3.2.6 :224 &gt; 
</span></code></pre></div></div>
<p>This is because defining the <code class="language-plaintext highlighter-rouge">index_attributes</code> method as <code class="language-plaintext highlighter-rouge">self.index_attributes</code> changes it from being an instance method to a class method. What this means is that we can nolonger call it on instances of the Post class but rather only on the Class itself. As you can see below, calling the method on the class itself doesn’t throw an error.</p>

<p>Also, its important to keep in mind that when the metaprogramming code is generating methods ending in the <code class="language-plaintext highlighter-rouge">_attributes</code>, the methods for example the <code class="language-plaintext highlighter-rouge">index_attributes</code> method will be generated as <code class="language-plaintext highlighter-rouge">index_attributes</code> instead of <code class="language-plaintext highlighter-rouge">self.index_attributes</code>.</p>

<p>With this, we can conclude, <code class="language-plaintext highlighter-rouge">self</code> can stand for anything. From the class itself to an instance of a class.</p>

<h2 id="is-send-really-that-important-where-would-we-be-without-send">Is send really that important? Where would we be without send?</h2>
<p>Without the <code class="language-plaintext highlighter-rouge">send</code> method, the <code class="language-plaintext highlighter-rouge">fetch_attributes</code> method would have to be implemented like below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fetch_attributes</span>
    <span class="k">return</span> <span class="n">index_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">index_attributes</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">display_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">display_attributes</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">show_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">show_attributes</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">edit_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">edit_attributes</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">form_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">form_attributes</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">new_attributes</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">new_attributes</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>
<p>As you can see, we’d have to manually write return statements to check if each and everyone of the possible methods is defined.This gets tiring pretty fast, especially if you’re dealing with a lot of methods. With send in our toolbox, we can dynamically generate and call the currently defined method(s) on whatever self is. Put simply, <code class="language-plaintext highlighter-rouge">send</code> allows us to write maintainable code while being lazy along the way.</p>

<h2 id="my-name-is-send-and-i-wanna-tell-you-about-my-colleague-respond_to">My name is send and I wanna tell you about my colleague respond_to?</h2>
<p>The <code class="language-plaintext highlighter-rouge">respond_to?</code> method is what checks if a method is defined in the class. Without it, the output below is what we’d run into.</p>

<h2 id="a-subtle-requirement-for-using-send-method">A subtle requirement for using send method</h2>
<p>Let’s modify the code a bit to identify the value of <code class="language-plaintext highlighter-rouge">method_for_view</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">fetch_attributes</span>
    <span class="n">possible_attributes_for_view</span> <span class="o">=</span> <span class="no">VIEW_ATTRIBUTES_MAPPING</span><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="nf">to_sym</span><span class="p">]</span>
    
    <span class="n">possible_attributes_for_view</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_for_view</span><span class="o">|</span>
      <span class="nb">puts</span> <span class="s2">"Value of method_for_view is: </span><span class="si">#{</span><span class="n">method_for_view</span><span class="si">}</span><span class="s2">"</span>
      <span class="nb">puts</span> <span class="s2">" Class of method_for_view: </span><span class="si">#{</span> <span class="n">method_for_view</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">return</span> <span class="nb">send</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">method_for_view</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>As you can see, <code class="language-plaintext highlighter-rouge">method_for_view</code> is a Symbol so, inside the parentheses, when calling the <code class="language-plaintext highlighter-rouge">send</code> method, we pass in a symbol and not a method name.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">314</span> <span class="o">&gt;</span> <span class="n">post</span><span class="p">.</span><span class="nf">fetch_attributes</span>
<span class="no">Value</span> <span class="n">of</span> <span class="n">method_for_view</span> <span class="ss">is: </span><span class="n">index_attributes</span>
<span class="no">Class</span> <span class="n">of</span> <span class="n">method_for_view</span> <span class="ss">is: </span><span class="no">Symbol</span>
<span class="no">Value</span> <span class="n">of</span> <span class="n">method_for_view</span> <span class="ss">is: </span><span class="n">display_attributes</span>
<span class="no">Class</span> <span class="n">of</span> <span class="n">method_for_view</span> <span class="ss">is: </span><span class="no">Symbol</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:index_attributes</span><span class="p">,</span> <span class="ss">:display_attributes</span><span class="p">]</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mi">315</span> <span class="o">&gt;</span> 
</code></pre></div></div>

<p>This reveals a subtle detail about the <code class="language-plaintext highlighter-rouge">send</code> method in Ruby which is that allows 2 options for passing an already defined method to send inside parentheses with one of them being as a symbol(like the current code) and the other as a string.</p>

<p>And that’s pretty much all I can say about the <code class="language-plaintext highlighter-rouge">send</code> method in ruby. Before I depart however, I’ll leave you with a question. What happens incase we pass a non-existent method to the <code class="language-plaintext highlighter-rouge">send</code> method? Try it out in the browser and see the result for yourself.</p>]]></content><author><name></name></author><category term="refactoring" /><category term="ruby" /><summary type="html"><![CDATA[The send method is one of the most commonly used Ruby methods when implementing metaprogramming solutions to problems in Ruby. For this reason, it is imperative that you understand how it works and the context in which its a method of choice. There is no better way to do this than with a practical example.]]></summary></entry><entry><title type="html">A junior developer’s guide to contributing to ruby events</title><link href="http://localhost:4000/ruby/2025/07/18/a-junior-developer-guide-to-contributing-to-ruby-events.html" rel="alternate" type="text/html" title="A junior developer’s guide to contributing to ruby events" /><published>2025-07-18T01:36:47+03:00</published><updated>2025-07-18T01:36:47+03:00</updated><id>http://localhost:4000/ruby/2025/07/18/a-junior-developer-guide-to-contributing-to-ruby-events</id><content type="html" xml:base="http://localhost:4000/ruby/2025/07/18/a-junior-developer-guide-to-contributing-to-ruby-events.html"><![CDATA[<p>This guide makes the following one major assumption which is that you have a Github account. If by any chance you’re reading this and don’t have one, create one first and then come back to the guide.</p>

<ul>
  <li>Fork repo</li>
  <li>Clone repo on your local machine</li>
  <li>Run <code class="language-plaintext highlighter-rouge">bundle install</code></li>
  <li>Create the development database with <code class="language-plaintext highlighter-rouge">rails db:create</code></li>
</ul>

<p>At the time of writing this, the required version of ruby before you can run <code class="language-plaintext highlighter-rouge">rails db:create</code> and <code class="language-plaintext highlighter-rouge">bundle install</code> is ruby 3.4.5.
If you have an older version, you may run into the error <code class="language-plaintext highlighter-rouge">Your Ruby version is 3.2.3, but your Gemfile specified 3.4.5</code>  which is simply solved by installing the required version of Ruby.</p>

<p><img src="/assets/images/contributing-to-ruby-events/ruby-version-3.4.5.png" alt="Install Ruby version 3.4.5" /></p>

<p>If <code class="language-plaintext highlighter-rouge">rails db:create</code> ran successfully, you’ll see the output below:</p>

<p><img src="/assets/images/contributing-to-ruby-events/successful-database-creation.png" alt="Successful creation of databases" /></p>

<ul>
  <li>
    <p>Migrate by running <code class="language-plaintext highlighter-rouge">rails db:migrate</code>
<img src="/assets/images/contributing-to-ruby-events/successful-database-migration.png" alt="Successful migration" /></p>
  </li>
  <li>
    <p>Seed database with <code class="language-plaintext highlighter-rouge">rails db:seed</code>
<img src="/assets/images/contributing-to-ruby-events/successful-database-seeding.png" alt="Successful seeding" /></p>
  </li>
  <li>
    <p>Start application by running <code class="language-plaintext highlighter-rouge">bin/dev</code></p>
  </li>
</ul>

<p>If you don’t have Yarn installed on your machine, running <code class="language-plaintext highlighter-rouge">bin/dev</code> will result into the error below. 
<img src="/assets/images/contributing-to-ruby-events/yarn-error.png" alt="Yarn error" /></p>

<p>Solving this error is simple. Just run <code class="language-plaintext highlighter-rouge">yarn install</code>. You’ll see the output below following successful installation of Yarn.
<img src="/assets/images/contributing-to-ruby-events/successful-yarn-install.png" alt="Install Yarn" /></p>

<p>After this setup process, you can now play around with the application in your browser. 
<img src="/assets/images/contributing-to-ruby-events/application-as-seen-in-browser.png" alt="Browsing app in browser" /></p>

<p>On the Ruby Events issues page, there is a ton of issues that you can help out with from features and enhancements to contributing conference data for new and past events. 
<img src="/assets/images/contributing-to-ruby-events/list-of-available-issues.png" alt="List of available Open issues" /></p>

<p>Choose the one you’d like to work on and ask to be assigned. After being assigned, proceed to work on the issue.</p>

<p>Before you start working on your issue, make sure that your local repository is up to date with the Ruby Events remote repository. To do this, click on the “Sync fork” button and thereafter the “Update branch” button. This will sync the latest changes from the Ruby events repository into your fork on Github.</p>

<p><img src="/assets/images/contributing-to-ruby-events/bringing-your-fork-up-to-date.png" alt="Bringing your fork up to date" /></p>

<p>Locally, while on the main branch, run the command <code class="language-plaintext highlighter-rouge">git pull origin main</code> bring your local repository up to date with the Ruby Events remote repository.</p>

<p>Create a new branch name describing the issue you’re working on, switch to that branch.</p>

<p>If for example I chose an issue that involves contributing conference data, I would name my branch after the name of the event whose data I am contributing. I would then switch to that branch with the command below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">add</span><span class="o">-</span><span class="n">imaginary</span><span class="o">-</span><span class="n">ruby</span><span class="o">-</span><span class="n">conference</span><span class="o">-</span><span class="n">data</span>
</code></pre></div></div>
<p>With the above git command, you’ve created a new branch named <code class="language-plaintext highlighter-rouge">add-imaginary-ruby-conference-data</code> and switched to it.</p>

<p><img src="/assets/images/contributing-to-ruby-events/creating-a-new-branch.png" alt="Creating a new branch" /></p>

<p>Proceed to implement the feature/ add conference data and test it out in the browser to confirm that it’s working as expected.</p>

<p>Before pushing to Github, you may run the <code class="language-plaintext highlighter-rouge">bin/lint</code> script to autocorrect any Lint issues on your branch for example those to do with Indentation.</p>

<p>Push your code to github with <code class="language-plaintext highlighter-rouge">git push origin add-imaginary-ruby-conference-data</code>. This will create a remote counterpart for your branch which you’ll use to open a pull request.</p>

<p>Open a PR, in the description, describe what your PR is about and what it fixes/adds linking the issue number if it applies. While not mandatory, its a good idea to attach a screenshot/video showing your fix. This makes it easier for the reviewers to get the gist of what your PR is meant to add.</p>

<p>Upon finally opening your PR, the Ruby Events CI will be triggered by default. This is just a bunch of checks which let you know incase some of those lint issues we talked about earlier are still present.</p>

<p>If none of them are present, which is usually the case if you ran <code class="language-plaintext highlighter-rouge">bin/lint</code>, the CI will let you know that all tests ran on your PR pass.</p>

<p>Passing CI tests will look like this:
<img src="/assets/images/contributing-to-ruby-events/passing-ci-tests.png" alt="Passing CI tests" /></p>

<p>If some of them are failing, you’ll proceed to check which specific one is failing, make the change to solve it locally, commit the new changes, then push your latest changes to Github.</p>

<p>Failing CI tests will look like below:
<img src="/assets/images/contributing-to-ruby-events/failing-ci-tests.png" alt="Failing CI tests" /></p>

<p>The CI will again run automatically and hopefully now, your CI tests will all pass.</p>

<p>If everything passes, now onto the good part which is the review process. The maintainers will let you know incase of anything that needs to be changed and potentially how to go about it. Still, just like for the failing lint, locally apply the requested changes by the maintainer, commit and push to Github.</p>

<p>If the CI for your PR passes and the maintainer has agreed that there are no further changes necessary for your PR, your PR will be merged into main. The merging may not happen as quickly as you might want to but eventually it will be merged. 
A merged PR will look like below:</p>

<p><img src="/assets/images/contributing-to-ruby-events/merged-pr.png" alt="Merged PR" /></p>

<p>There are so many issues to work on from the project for all skill levels from juniors to experienced developers. Do check the repo out and work on any issues that may interest you.
<img src="/assets/images/contributing-to-ruby-events/list-of-available-issues.png" alt="List of available Open issues" /></p>

<p>For those that may be going through this article and you stumble upon something upon the way, don’t hesitate to reach out. I’ll be more than delighted to help out!</p>]]></content><author><name></name></author><category term="ruby" /><summary type="html"><![CDATA[This guide makes the following one major assumption which is that you have a Github account. If by any chance you’re reading this and don’t have one, create one first and then come back to the guide.]]></summary></entry><entry><title type="html">How to prevent name collisions when naming your Ruby classes</title><link href="http://localhost:4000/ruby/2025/07/10/how-to-prevent-name-collisions-when-naming-your-ruby-classes.html" rel="alternate" type="text/html" title="How to prevent name collisions when naming your Ruby classes" /><published>2025-07-10T15:49:47+03:00</published><updated>2025-07-10T15:49:47+03:00</updated><id>http://localhost:4000/ruby/2025/07/10/how-to-prevent-name-collisions-when-naming-your-ruby-classes</id><content type="html" xml:base="http://localhost:4000/ruby/2025/07/10/how-to-prevent-name-collisions-when-naming-your-ruby-classes.html"><![CDATA[<h2 id="problem">Problem:</h2>
<p>For whatever reason, you want to create a class named <code class="language-plaintext highlighter-rouge">Integer</code> and instantiate objects with that class.</p>

<h2 id="approach">Approach:</h2>
<p>You create the class like this:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Integer</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="k">end</span>
 <span class="o">=&gt;</span> <span class="kp">nil</span> 
</code></pre></div></div>
<p>That works like a charm. Now you proceed to instantiate objects using the newly created <code class="language-plaintext highlighter-rouge">Integer</code> class.
Boom, you run into the error below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">Integer</span><span class="p">.</span><span class="nf">new</span>
<span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">3</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;': undefined method `</span><span class="n">new</span><span class="s1">' for Integer:Class (NoMethodError)

Integer.new
       ^^^^
	from /usr/share/rvm/gems/ruby-3.2.6/gems/irb-1.15.1/exe/irb:9:in `&lt;top (required)&gt;'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">irb</span><span class="p">:</span><span class="mi">25</span><span class="ss">:in</span> <span class="sb">`load'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/irb:25:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="s1">'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/ruby_executable_hooks:22:in `eval'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">ruby_executable_hooks</span><span class="p">:</span><span class="mi">22</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;'
3.2.6 :004 &gt; 
</span></code></pre></div></div>
<h2 id="explanation-of-why-we-run-into-the-error">Explanation of why we run into the error:</h2>
<p>While this is valid ruby syntax for instantiating objects from a class, you can see we ran into a specific kind of error named a “<code class="language-plaintext highlighter-rouge">NoMethodError</code>”.</p>

<p>Ruby ships with an inbuilt class called <code class="language-plaintext highlighter-rouge">Integer</code> and this class doesn’t have a <code class="language-plaintext highlighter-rouge">new</code> method defined for it. When you try to create new objects by calling <code class="language-plaintext highlighter-rouge">Integer.new</code>, instead of Ruby calling the <code class="language-plaintext highlighter-rouge">new</code> method on your newly created <code class="language-plaintext highlighter-rouge">Integer</code> class, the <code class="language-plaintext highlighter-rouge">new</code> method is called on ruby’s inbuilt <code class="language-plaintext highlighter-rouge">Integer</code> class. And because this class doesn’t have a method named <code class="language-plaintext highlighter-rouge">new</code> defined for it, we run into the “no method error”.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="s1">': undefined method `new'</span> <span class="k">for</span> <span class="no">Integer</span><span class="ss">:Class</span> <span class="p">(</span><span class="no">NoMethodError</span><span class="p">)</span>
</code></pre></div></div>

<p>In simple terms, the error loosely translates to: “<strong>Hey, you called a method named <code class="language-plaintext highlighter-rouge">new</code> on my <code class="language-plaintext highlighter-rouge">Integer</code> class. But when i go through my list of methods defined for the <code class="language-plaintext highlighter-rouge">Integer</code> class, I can’t find this method named <code class="language-plaintext highlighter-rouge">new</code>.</strong>”</p>

<p>A simple irb check lets you know that indeed this default <code class="language-plaintext highlighter-rouge">Integer</code> class has no method named <code class="language-plaintext highlighter-rouge">new</code> defined for it.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="no">Integer</span><span class="p">.</span><span class="nf">methods</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="kp">false</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> 
</code></pre></div></div>
<h2 id="potential-solutions">Potential solution(s):</h2>
<p>One solution is to consider a different name for your new class. Ideally one that doesn’t conflict with the names of inbuilt ruby classes. That could work, but what if you don’t wanna consider a different name?</p>

<p>In that case, you can solve the above error by wrapping your newly created class in a module. You can name that module what ever you like and use it to reference the custom <code class="language-plaintext highlighter-rouge">Integer</code> class when creating new objects like below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="k">module</span> <span class="nn">Namespace</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span>   <span class="k">class</span> <span class="nc">Integer</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span>   <span class="k">end</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="k">end</span>
 <span class="o">=&gt;</span> <span class="kp">nil</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="no">Namespace</span><span class="o">::</span><span class="no">Integer</span><span class="p">.</span><span class="nf">new</span>
 <span class="o">=&gt;</span> <span class="c1">#&lt;Namespace::Integer:0x000075c9a235a098&gt; </span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> 
</code></pre></div></div>
<p>As you can see, with the module approach, we don’t run into any problems instantiating objects with the custom <code class="language-plaintext highlighter-rouge">Integer</code> class.</p>

<h2 id="bonus">Bonus:</h2>
<p>The simple irb check below confirms that the <code class="language-plaintext highlighter-rouge">new</code> method is available for your newly created <code class="language-plaintext highlighter-rouge">Namespace::Integer</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="no">Namespace</span><span class="o">::</span><span class="no">Integer</span><span class="p">.</span><span class="nf">methods</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="kp">true</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> 
</code></pre></div></div>
<p>In case you hadn’t noticed I named my module “Namespace”. This is because the act of wrapping a class in a module to prevent name collisions with another class, for example the inbuilt <code class="language-plaintext highlighter-rouge">Integer</code> and custom <code class="language-plaintext highlighter-rouge">Integer</code> classes, is referred to as <strong>Namespacing</strong>. Therefore, my module name was a subtle hint to the term used to refer to the technique I was applying to solve the problem.</p>]]></content><author><name></name></author><category term="ruby" /><summary type="html"><![CDATA[Problem: For whatever reason, you want to create a class named Integer and instantiate objects with that class.]]></summary></entry><entry><title type="html">Why Junior Rails developers should contribute to Open Source projects</title><link href="http://localhost:4000/ruby/2025/07/04/why-junior-rails-developers-should-contribute-to-open-source.html" rel="alternate" type="text/html" title="Why Junior Rails developers should contribute to Open Source projects" /><published>2025-07-04T21:49:09+03:00</published><updated>2025-07-04T21:49:09+03:00</updated><id>http://localhost:4000/ruby/2025/07/04/why-junior-rails-developers-should-contribute-to-open-source</id><content type="html" xml:base="http://localhost:4000/ruby/2025/07/04/why-junior-rails-developers-should-contribute-to-open-source.html"><![CDATA[<h2 id="the-path-to-land-a-tech-job-is-documented-online">The path to land a tech job is documented online.</h2>
<p>Before the tech job market became a mess with AI and big tech lay offs, the path to becoming a software developer was pretty straightforward. Build projects, make a portfolio and then apply to jobs. This was applicable whether you’re self taught or whether you went to a boot camp. Most self taught developers would choose a tutorial in their language of choice and build along with their instructor. After working through this tutorial for whatever duration of time, at the end, they would have a project to show off, an end product of having worked through said tutorial.</p>

<p>Nowadays you need more than a list of tutorial projects you’ve worked through to land a soft ware job especially for junior developers. And as someone trying to land your first tech at arguably the worst point in time in tech history, you’ll have to do a little bit more than building projects to stand out from the crowd. My personal experience working through online tutorials led me to the conclusion that, “Tutorial projects are not enough. Supplement them with Open source contributions”.</p>

<p>Through out this blog post, I have one aim, to convince the fellow junior developer reading this to consider contributing to open source.</p>

<h2 id="how-open-source-addresses-the-problem-with-programming-tutorials">How Open source addresses the problem with programming tutorials.</h2>
<p>The problem with most tutorials is that even after you’ve done and completed many of them, you’ve done a lot of copy pasting along the way and you don’t really understand why the creator of the tutorial chose the syntax they ended up with and more importantly, if there are better solutions to the problem at hand. Most tutorials focus on writing code that just works, and most junior developers including me, “We don’t know what we don’t know”. This is where open source comes in as a solution to the tutorial problem.</p>

<p>For a junior developer, contributing to open source is comparable to being thrown in the deep end. You’ll have to navigate the code base your self, you’ll struggle with a lot of bugs that are introduced by your new code, failing CI tests and so much more. Every line of code you write has to be accounted for and tested that it won’t break existing functionality. If the code can be rewritten or refactored, you’ll be instructed to do just that.</p>

<blockquote>
  <p><strong><em>“Every code base has a given standard of code quality and for your PR to be 
merged, you’ll have nothing to do other than meet that standard.”</em></strong></p>
</blockquote>

<p>The good news through out all this is that, <strong>by the time that PR is merged, you’ll be surprised at the sheer amount of stuff you didn’t know when you started out</strong>.</p>

<p><img src="/assets/images/contribute-to-open-source/haruki-murakami-kafka-on-the-shore-quote.png" alt="Kafka on the shore quote" /></p>

<h2 id="my-first-open-source-experience">My first Open Source experience.</h2>
<p>In the last quarter of 2024, i made my first open source contribution to a project called <strong>Avo</strong>. My thought process about how I would work through the assigned issue was naive in every sense. I imagined that i would create a new branch for the issue i was working on, make changes to the code to implement that feature, go to localhost:3000 in my browser to see if the feature works as expected, then push the PR and have that PR merged to the main branch.</p>

<p><img src="/assets/images/contribute-to-open-source/didnt-go-as-planned.png" alt="Didn't go as planned" /></p>

<p>Of course that didn’t go as i had planned evidenced by the 45 comments on the PR in the picture attached above.</p>

<p>First and foremost, I realized that making changes to the code base as i went about implementing the feature brought about a few things. New bugs were introduced, i ran into errors and the new code caused tests that were passing on main to fail on my branch. 
Which brings me to my first lesson, “For every code change you make, appropriate tests should be written for that code” and “testing is the only way for you to be sure that a feature works as expected.” A failing tests definitely highlights that something is wrong and a passing test gives you confidence that the feature implementation was successful. Having experienced this ordeal, i appreciated writing tests more and the ideas behind test driven development commonly known as TDD.</p>

<p><strong>My new code caused system, lint and feature CI tests to fail</strong>:
<img src="/assets/images/contribute-to-open-source/my-new-code-caused-CI-tests-to-fail.png" alt="My new code breaks the CI" /></p>

<p>Secondly, when you push a branch to the PR, the project CI tests your code against all versions of the project as many projects tend to offer support for old version of projects. In the rails ecosystem, this means that even if the current code base is powered by the latest version of rails i.e. Rails 8, the code you introduce should work okay even on previous versions of rails, both major and minor versions. This includes Rails 6, 7, 6.1, 7.2 and so on. “The code you introduced should not break any existing functionality or tests”. Therefore for your code to be finally merged, all checks ran against that PR should pass.</p>

<p><strong>Struggling to make my code work for an older version of Rails</strong>:
<img src="/assets/images/contribute-to-open-source/make-code-work-for-old-rails-versions.png" alt="Trying to make my code work for Rails 6.1" /></p>

<p>There are other lessons i learnt of course that are related to the CI for example working with code standard tools such as Rubocop, making sure that your changes work on both new and major versions using a tool called Appraisal from Thought bot and so on. The main point I’m trying to put across is that, you don’t know what you don’t know and the amount of stuff i learnt just by working on that first PR was so enormous.</p>

<h2 id="benefits-of-contributing-to-open-source">Benefits of contributing to open source</h2>

<ol>
  <li>
    <p>Making it work is the first step, making it maintainable and making sure that the code you’ve written meets the standards of that code base is the second step. By contributing to open source, you go from “this code works” to “Is this code maintainable in the long run? and if future me was to implement a feature that relies on the code I’m writing today, how many and what kind of changes would he have to make to this code?”</p>

    <p><img src="/assets/images/contribute-to-open-source/changing-your-mindset-about-code.png" alt="Changing your mindset after making code work" /></p>
  </li>
  <li>
    <p>Its a hands on lesson in refactoring. Most times when you read books, in my case, Ruby programming books, they show you a piece of code and then give you ideas on how that code could be refactored. While this is good, for such refactoring knowledge to be ingrained in your memory, you’ll need to put it into practice.          If you’re working on a PR and you run into a use case where one of those refactoring ideas may apply, you’ll appreciate the refactoring more simply because this time around, you’ll have context and you’ll be able to answer questions like: Why did we choose this specific idea to refactor this code and not the other?, What are the implications of this refactor to other parts of the code base?, Why is this refactoring technique better than the other? This shared context is very important because after learning it for the first time, the process and technique you applied to perform that refactoring will be with you for life. In my experience, refactoring ideas and techniques are best learn from experience. You need to make your hands dirty.</p>

    <p><strong>Refactor to use meta programming instead of if statements as part of another PR</strong>
<img src="/assets/images/contribute-to-open-source/before-meta-programming-refactor-1.png" alt="Before meta-programming refactor part 1" />
<img src="/assets/images/contribute-to-open-source/before-meta-programming-refactor-2.png" alt="Before meta-programming refactor part 2" /></p>

    <p><strong>To this:</strong>
<img src="/assets/images/contribute-to-open-source/after-meta-programming-refactor.png" alt="After meta-programming refactor" /></p>
  </li>
  <li>
    <p>Its free mentorship from the maintainer of the code bases who in most cases tend to be senior engineers. These guys are more willing to help you simply because you’ve shown initiative which is something very few people do. Remember, most juniors want a mentor but by contributing to open source, you get a mentor by default. No asking required.</p>

    <p><strong>See a couple of reviews left on my code</strong>
<img src="/assets/images/contribute-to-open-source/first-pr-review-comment.png" alt="First PR comment review" />
<img src="/assets/images/contribute-to-open-source/second-pr-review-comment.png" alt="Second PR comment review" /></p>
  </li>
  <li>
    <p>Open source contributions expose gaps in memory and will allow you identify which areas you are not as proficient in as much as you claim to be. Take an example, when i was working on my first Open source contribution, I struggled a lot with writing tests and making the distinction between whether to write feature or unit tests. While it wasn’t my first time working with Rspec and Capybara(the testing framework duo of the project), i certainly hadn’t used these in a production environment. When i identified this gap, i went down a rabbit hole to answer questions like How is a test built line by line?, What is the difference between “describe”, “it” and “context” and when should each be used? How do i stub and mock? That was back in 2024. Fast forward to June 2025, and I’m way better at writing tests than I was when i started out. At some point, i even considered starting with the test first and then implementing a feature last, something old me would’ve considered only possible for experienced programmers. The thought that i would even consider this is very funny given that, TDD is the one thing that never made sense to me for a while.</p>
  </li>
  <li>
    <p>There is no downside to contributing to open source. Even in unfortunate cases where your PR is not approved and merged, the sheer process of working on the PR, meeting the standards of that code base, fixing tests that are failing on the PR, all these are learning experiences in of themselves are lessons which you may draw upon when working on future problems in other code bases.</p>
  </li>
  <li>
    <p>Your contributions will serve as experience when applying for potential jobs. I haven’t done this in practice personally, but its not unheard of for someone to say that they landed their current developer position just because they contributed to open source.</p>
  </li>
</ol>

<p>Lastly and most importantly, you’re working on something bigger than you, something for the community. Something relied upon by other people and their projects. That in of itself is fulfilling. Its honestly one of the best ways you can give back.</p>

<p>PS: Special shoutout to Paul Bob the CTO at Avo for being very helpful and patient with me on all the Avo PR’s I’ve worked on.</p>

<p>In case you’re now considering to contribute to Open source but don’t know where to start, kindly reach out to me via DM on Twitter. <a href="https://x.com/zhephyn">DM me</a>. I’ll be more than delighted to help you out.</p>

<p>Peace</p>]]></content><author><name></name></author><category term="ruby" /><summary type="html"><![CDATA[The path to land a tech job is documented online. Before the tech job market became a mess with AI and big tech lay offs, the path to becoming a software developer was pretty straightforward. Build projects, make a portfolio and then apply to jobs. This was applicable whether you’re self taught or whether you went to a boot camp. Most self taught developers would choose a tutorial in their language of choice and build along with their instructor. After working through this tutorial for whatever duration of time, at the end, they would have a project to show off, an end product of having worked through said tutorial.]]></summary></entry><entry><title type="html">An Introduction To Ruby Code blocks Part 2</title><link href="http://localhost:4000/ruby/2025/04/18/an-introduction-to-ruby-code-blocks-part-2.html" rel="alternate" type="text/html" title="An Introduction To Ruby Code blocks Part 2" /><published>2025-04-18T01:18:00+03:00</published><updated>2025-04-18T01:18:00+03:00</updated><id>http://localhost:4000/ruby/2025/04/18/an-introduction-to-ruby-code-blocks-part-2</id><content type="html" xml:base="http://localhost:4000/ruby/2025/04/18/an-introduction-to-ruby-code-blocks-part-2.html"><![CDATA[<h2 id="shortcomings-of-implicit-code-blocks">Shortcomings of Implicit Code Blocks</h2>
<p>In Part 1 of this series, examination of the shortcomings of  Implicit code blocks in Ruby highlighted the fact that, they can’t be stored and therefore manipulated or passed around to be run later. They have to be executed instantly and inside the method to which they are passed.</p>

<p>Consider these 2 methods below both of which are meant to solve the same problem, printing someone’s full name:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">full_name</span>
  <span class="n">first</span> <span class="o">=</span> <span class="s2">"John"</span>
  <span class="n">last</span> <span class="o">=</span> <span class="s2">"Doe"</span>
  <span class="k">yield</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
<span class="k">end</span>

<span class="n">full_name</span> <span class="k">do</span> <span class="o">|</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="o">|</span>
  <span class="s2">"</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="c1">#OUTPUT</span>
<span class="s2">"John Doe"</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">first_name</span><span class="p">)</span>
  <span class="n">firstname</span> <span class="o">=</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">call</span>
  <span class="n">fullname</span> <span class="o">=</span> <span class="n">firstname</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="s2">"Doe"</span>
<span class="k">end</span>

<span class="n">full_name</span> <span class="k">do</span> 
  <span class="s2">"John"</span>
<span class="k">end</span>

<span class="c1">#OUTPUT</span>
<span class="s2">"John Doe"</span>
</code></pre></div></div>

<p>The first solution(method) employs yield and specifically the concept of Implicit code blocks in Ruby to solve the problem while the second utilizes Explicit code blocks to solve the same problem. For this exact problem, both these solutions are okay. However for use cases when we need to “<em>capture</em>” and “<em>save the code block for later execution</em>”, the limitations of solution 1 which utilizes Implicit code blocks become evident very quickly and we’ll see that the second solution i.e. the one employing explicit code blocks is better for the reasons highlighted below.</p>
<h2 id="comparison-between-explicit-and-implicit-code-blocks-in-ruby">Comparison between Explicit and Implicit Code Blocks in Ruby</h2>

<table>
  <thead>
    <tr>
      <th>Aspect</th>
      <th>Implicit Code blocks(yield version)</th>
      <th>Explicit code blocks(Proc version)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Can the block be stored?</td>
      <td>No. Can only be used inside the method</td>
      <td>Yes. Can be stored as a Proc object.</td>
    </tr>
    <tr>
      <td>Can the block re-used outside the method?</td>
      <td>No. Only called within the method</td>
      <td>Yes. Since explicit code blocks can be stored as Proc objects, these Proc objects can be used outside the method.</td>
    </tr>
    <tr>
      <td>Can the block be passed to other method?</td>
      <td>No. Only associated with the method to which its passed</td>
      <td>Yes. Explicit code blocks captured as Proc objects can be passed to other methods.</td>
    </tr>
  </tbody>
</table>

<h2 id="behind-the-scenes-of-how-ruby-handles-explicit-code-blocks">Behind the scenes of how Ruby handles Explicit code blocks</h2>

<p>Lets modify the fullname method a bit:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">first_name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">class</span>
  <span class="n">firstname</span> <span class="o">=</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">call</span>
  <span class="n">fullname</span> <span class="o">=</span> <span class="n">firstname</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="s2">"Doe"</span>
<span class="k">end</span>
<span class="n">full_name</span> <span class="k">do</span> 
  <span class="s2">"John"</span>
<span class="k">end</span>

<span class="c1">#OUTPUT</span>
<span class="no">Proc</span>
<span class="s2">"John Doe"</span> 
</code></pre></div></div>

<p>When we pass a block to the above method, we can see that on checking for the class of the “first_name” object, the output is  “Proc” signifying that this is a Proc object. Here’s a step by step flow of how that happens:</p>

<ul>
  <li>Explicit code block passed to the full_name method is converted into a Proc object.</li>
  <li>Proc object is captured and assigned to and stored in the first_name parameter</li>
  <li>Inside the method, we call the Proc using:
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_name</span><span class="p">.</span><span class="nf">call</span>
</code></pre></div>    </div>
    <p>The above line executes the code block and returns the result of executing the explicit code block we passed to the method initially.</p>
  </li>
</ul>

<blockquote>
  <p>Call is a ruby method defined for Proc objects and since first_name is a Proc object, we can therefore call the “call” method on it.</p>
</blockquote>

<ul>
  <li>We assign the result of executing the explicit code block to a variable named “firstname”</li>
  <li>Using string concatenation, we add a string named “Doe” i.e the second name, to finally get the full name which is returned to us in the terminal. 
The conversion of an explicit code block into a Proc object is the reason for the flexibility associated with Explicit code blocks in ruby. Since we end up with a Proc object, we can use this object for all sorts of things from passing it to other methods as well as executing it at a later point in time.</li>
</ul>

<h2 id="the-importance-of-the-ampersand">The Importance of the Ampersand(&amp;)</h2>
<p>In case you’ve been observant, when defining the full_name method, we prefixed the “first_name” parameter with a &amp; symbol commonly known as the Ampersand symbol. 
By prefixing the “first_name” parameter with an Ampersand(&amp;) we let ruby know that a code block passed to the full_name method should be converted to a Proc object. Without it, we get an error below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">036</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="n">first_name</span><span class="p">)</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">037</span> <span class="o">&gt;</span>   <span class="n">firstname</span> <span class="o">=</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">call</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">03</span><span class="mi">8</span> <span class="o">&gt;</span>   <span class="n">full_name</span> <span class="o">=</span> <span class="n">firstname</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="s2">"Doe"</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">03</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="k">end</span>
 <span class="o">=&gt;</span> <span class="ss">:full_name</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">040</span> <span class="o">&gt;</span> <span class="n">full_name</span> <span class="k">do</span> 
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">041</span> <span class="o">&gt;</span>   <span class="s2">"John"</span>
<span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span> <span class="p">:</span><span class="mo">042</span> <span class="o">&gt;</span> <span class="k">end</span>
<span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">36</span><span class="ss">:in</span> <span class="sb">`full_name': wrong number of arguments (given 0, expected 1) (ArgumentError)
	from (irb):40:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="s1">'
	from /usr/share/rvm/gems/ruby-3.2.6/gems/irb-1.15.1/exe/irb:9:in `&lt;top (required)&gt;'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">irb</span><span class="p">:</span><span class="mi">25</span><span class="ss">:in</span> <span class="sb">`load'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/irb:25:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="s1">'
	from /usr/share/rvm/gems/ruby-3.2.6/bin/ruby_executable_hooks:22:in `eval'</span>
	<span class="n">from</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">6</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">ruby_executable_hooks</span><span class="p">:</span><span class="mi">22</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;'
3.2.6 :043 &gt; 
</span></code></pre></div></div>

<p>Without the ampersand, Ruby no longer knows how to handle the code block passed to it and expects the full_name method to  be called like any other method in Ruby. And since we defined the full_name method to have one parameter, namely the first_name, Ruby expects that the method should be called along with one argument, which is exactly why we get the error above. In simple terms, Ruby is saying:</p>

<p>“<em>Hey, you defined the “full_name” method to take an argument but you’ve called the “full_name” method without providing an argument.</em>”</p>

<p>There is a way for Ruby to understand that a block passed to a given method should be handled as an explicit code block even though you’ve left out the Ampersand.</p>

<p>Consider the code below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="n">first_name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">class</span>
  <span class="n">firstname</span> <span class="o">=</span> <span class="n">first_name</span><span class="p">.</span><span class="nf">call</span>
  <span class="n">fullname</span> <span class="o">=</span> <span class="n">firstname</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="s2">"Doe"</span>
<span class="k">end</span>

<span class="n">full_name</span><span class="p">(</span><span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="s2">"John"</span>
<span class="k">end</span><span class="p">)</span>

<span class="c1">#OUTPUT</span>
<span class="no">Proc</span>
 <span class="o">=&gt;</span> <span class="s2">"John Doe"</span>
</code></pre></div></div>

<p>In the above code, we see that the output is still the same as the initial “full_name” method regardless of the fact that we left out the Ampersand. The above code works because when passing the code block to the “full_name” method, we handled the conversion of the code block into a Proc object manually by calling Proc.new. 
In the output we also notice that the first_name object is a Proc object meaning the conversion of the code block into a Proc object was successful.</p>

<p>This highlights the importance of the Ampersand. For a given code block to be termed as an explicit code block, ruby has to convert it into a Proc object. This can be achieved either automatically(by prefixing the “first_name” parameter with the Ampersand(&amp;) and have Ruby handle the conversion of the code block into a Proc object behind the scenes as in the initial version of the full_name method) or manually where by we handle the conversion of the code block into a Proc object our selves by calling <strong>Proc.new</strong>. You can choose either based on what you prefer though my personal preference is to use the Ampersand as that’s one less thing to think about in case things go wrong.</p>

<p>When passing single line code blocks to methods for example the “full_name” method, you can use the syntax below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span><span class="p">(</span><span class="no">Proc</span><span class="p">.</span><span class="nf">new</span><span class="p">{</span> <span class="s2">"John"</span> <span class="p">})</span>
<span class="no">Proc</span>
 <span class="o">=&gt;</span> <span class="s2">"John Doe"</span> 
</code></pre></div></div>

<p>The syntax above is equivalent to the one below and returns the same output.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span><span class="p">(</span><span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="s2">"John"</span>
<span class="k">end</span><span class="p">)</span>
<span class="no">Proc</span>
 <span class="o">=&gt;</span> <span class="s2">"John Doe"</span> 
</code></pre></div></div>

<p>And that marks the end of this post. In case you missed part 1 of the series, you can check it out <a href="https://zhephyn.github.io/ruby/2025/04/16/an-introduction-to-ruby-code-blocks-part-1.html">here</a>.</p>]]></content><author><name></name></author><category term="ruby" /><summary type="html"><![CDATA[Shortcomings of Implicit Code Blocks In Part 1 of this series, examination of the shortcomings of Implicit code blocks in Ruby highlighted the fact that, they can’t be stored and therefore manipulated or passed around to be run later. They have to be executed instantly and inside the method to which they are passed.]]></summary></entry><entry><title type="html">An Introduction To Ruby Code blocks Part 1</title><link href="http://localhost:4000/ruby/2025/04/16/an-introduction-to-ruby-code-blocks-part-1.html" rel="alternate" type="text/html" title="An Introduction To Ruby Code blocks Part 1" /><published>2025-04-16T10:30:20+03:00</published><updated>2025-04-16T10:30:20+03:00</updated><id>http://localhost:4000/ruby/2025/04/16/an-introduction-to-ruby-code-blocks-part-1</id><content type="html" xml:base="http://localhost:4000/ruby/2025/04/16/an-introduction-to-ruby-code-blocks-part-1.html"><![CDATA[<h2 id="my-first-ruby-problem">My First Ruby Problem</h2>

<p>When i had started out to learn ruby, one of the earliest problems i was presented with was related to arrays. In this problem, you have an array. Then you have to iterate over that array such that you have each element of the array printed on its own line in the interpreter. For visual purposes, here is the problem plus its solution below implemented in irb.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The output:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
 <span class="o">=&gt;</span> <span class="o">[</span>1, 2, 3]
</code></pre></div></div>
<p>The solution is pretty simple, you utilize the “each” method for the iteration. This method is available for all arrays as part of the Array class. In addition to this, the solution utilizes a do-end block which specifies what should be done for each element in the array. In our case, we just print each element on its line in the irb console, but there are endless possibilities regarding what you could do with an element you’ve iterated over.</p>

<h2 id="enter-code-blocks">Enter Code Blocks</h2>

<p>Unbeknownst to me back then, that do-end block has a specific term ruby programmers used to refer to it and it can do way more, than just printing out array elements to the console.</p>

<p>The name of that do-end block is a code block, and to be specific about the kind of code block, since code blocks come in 2 variants, the code block in the array example above is an implicit code block. We’ll go over why it’s called an Implicit code block later on. But first, a short introduction to Ruby code blocks.</p>

<p>Put simply a code block is an executable piece of code that tends to be associated with a given method. This method is responsible for executing the code block passed to it.</p>

<h3 id="your-first-ruby-code-block">Your First Ruby Code Block</h3>

<p>Let’s say you have a method below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span>
  <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Then at any other place in your program, you have the code below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"This is the output   derived from executing the code block"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The above can also be written as:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"This is the output derived from executing the code block"</span><span class="p">}</span>
</code></pre></div></div>

<p>When we run either of the examples above in the ruby interpreter, we’ll have the statement below as the output:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"This is the output derived from executing the code block"</span>
</code></pre></div></div>

<h3 id="behind-the-scenes">Behind the scenes</h3>

<p>So how did we arrive at this output:</p>

<p>First and foremost, let’s examine the method. We defined a method named “my_method”. Inside the method, we have a yield keyword bound to an if statement.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</code></pre></div></div>
<p>Inside the method, we perform a conditional check. We evaluate whether a code block was passed to the “my_method” method using the block_given? method which evaluates to true or false. If the conditional check evaluates to true i.e a code block was passed when calling the method, we proceed to return the output of executing the code inside the code block. To return this output for the user to see in the interpreter, we use the yield keyword.</p>

<p>All in all 2 things are crucial within this method for the desired functionality to be achieved:</p>
<ul>
  <li>The block_given? Method which evaluates to a Boolean and performs a conditional check.</li>
  <li>yield which returns the output of executing the code inside the code block</li>
</ul>

<p>We can also write the same method as:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span>
  <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="k">yield</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now onto the code block itself.
This is responsible for the output we see in the interpreter. 
So in the code above , what we are doing is, we call a method and pass a code-block to it. And since the method does a conditional check with the block_given? method to see if a code block was passed to the method when it was called, the “my_method” method knows exactly how to handle this situation.</p>

<p>In the example above, so many moving parts are responsible for the output we end up seeing in the irb session. 
Now a hypothetical, what would be the output of running this program if we don’t perform the conditional check?</p>

<p>In case we defined the same method without the conditional check like below, then proceed to pass a code block to that method, we observe that no output is returned in the irb session.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"This is the output derived from executing the code block"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Trying to run the above will result in “nil” as the output. This is because, as much as our syntax for passing a code block to my_method is correct, the method itself doesn’t know what to do with the code block, which is why we don’t get the expected output.
The “nil” output wasn’t returned by the my_method, its pretty standard output.
So to be more specific about what happened, when you pass a code block to a method that isn’t in the know about what it should do with the code block and proceed to call that method, nothing is executed and nothing is returned.</p>

<h3 id="why-the-name-implicit-code-block">Why the name “Implicit code block”?</h3>

<p>Take the example method below:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">say_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Your name is </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>To have this method return a name of the current user, we simply call the method and pass in an argument of whatever name we want to return.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">say_name</span><span class="p">(</span><span class="s2">"Newton"</span><span class="p">)</span>
</code></pre></div></div>
<p>Output:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Your</span> <span class="nb">name</span> <span class="n">is</span> <span class="no">Newton</span>
</code></pre></div></div>

<p>Contrast the method above with the “my_method” method.</p>

<p>The method “my_method” differs from the “say_name” method in 1 major way:
When defining the “my_method” method, we didn’t specify any parameters for it. Because of this, when the method is called(along with the code block passed to it), the code block is not passed as an argument to the method. Since we call the method and pass a code block which isn’t treated by the method as an argument, this code block is referred to as an implicit code block.</p>

<p>This poses a few implications:
Because the code block is passed to the method not as an argument, what we can achieve with this code block is limited.</p>

<p>Think about it, if we were able to pass the code block as an argument when calling the method, we would be able to associate this code block with a parameter which means we can store whatever is in the code block and therefore use it later instead of instantly. This specific kind of code block is an Explicit code block which we’ll look at in part 2 of this section.</p>

<h2 id="a-closer-look-at-rubys-each-method">A Closer look at Ruby’s “each” method.</h2>

<p>Like we mentioned earlier, the solution for the array problem used the “each” ruby method whose underlying operating principle is similar to that of Implicit code blocks in Ruby. We can confirm this by taking a look at the source of Ruby’s “each” method.</p>
<pre><code class="language-C">VALUE
rb_ary_each(VALUE ary)
{
  long i;
  ary_verify(ary);
  RETURN_SIZED_ENUMERATOR(ary, 0, 0, ary_enum_length);
  for (i=0; i&lt;RARRAY_LEN(ary); i++) {
    rb_yield(RARRAY_AREF(ary, i));
  }
  return ary;
}
</code></pre>
<p>In this code, a couple things are happening but a few stand out.</p>

<ol>
  <li>The “each” method utilizes an equivalent of “yield” named “<strong>rb_yield</strong>”.</li>
  <li><strong>RETURN_SIZED_ENUMERATOR</strong>  checks for the presence of a block similar like what the block_given? method employed by the method “my_method” does. 
See the code attached below:</li>
</ol>

<pre><code class="language-C">#define RETURN_SIZED_ENUMERATOR(obj, argc, argv, size_fn) do { \
  if (!rb_block_given_p()) \
    return SIZED_ENUMERATOR(obj, argc, argv, size_fn); 
} while (0)
</code></pre>

<p>In the above code, we have a function named <strong>rb_block_given_p()</strong> whose purpose is to check whether the current method, in this case the “each” method is given a block. The rb_block_given_p() function as well as the block_given? ruby method, are of a similar importance, that is to check whether a given method was passed a block.</p>

<p>Based on the above findings, we can confidently say that the “each” ruby method operates based on the principle of implicit code blocks under the hood.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In case you’re interested, you read more about RETURN_SIZED_ENUMERATOR, ruby’s each method as well as the rb_block_given_p() by visiting the resources below:</p>
<ol>
  <li><a href="https://ruby-doc.org/3.4.1/Array.html#method-i-each">Each Ruby method</a></li>
  <li><a href="https://docs.ruby-lang.org/capi/en/master/dc/d1b/include_2ruby_2internal_2intern_2enumerator_8h_source.html">RETURN_SIZED_ENUMERATOR macros</a></li>
  <li><a href="https://docs.ruby-lang.org/capi/en/master/d7/d19/group__defmethod.html">rb_block_given_p function</a></li>
</ol>

<p>This part served as an introduction to implicit code blocks, and looked at the use cases for implicit code blocks which is iterating over elements in an array. In part 2, we’ll look at yet another type of Ruby code blocks named Explicit code blocks and highlight how this specific kind of code block solves the short comings of Implicit code blocks.</p>]]></content><author><name></name></author><category term="ruby" /><summary type="html"><![CDATA[My First Ruby Problem]]></summary></entry></feed>